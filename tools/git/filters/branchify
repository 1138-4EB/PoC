#!/usr/bin/python3
# EMACS settings: -*-  tab-width: 2; indent-tabs-mode: t; python-indent-offset: 2 -*-
# vim: tabstop=2:shiftwidth=2:noexpandtab
# kate: tab-width 2; replace-tabs off; indent-width 2;
#
# ==============================================================================
# Authors:               Thomas B. Preusser
#
# License:
# ==============================================================================
# Copyright 2007-2016 Technische Universitaet Dresden - Germany
#                     Chair for VLSI-Design, Diagnostics and Architecture
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# distributed under the License is distributed on an "AS IS" BASIS,default
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

from sys import argv, stdin
from subprocess import check_output

# Determine checked out branch
branch = check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"], universal_newlines=True).strip()

# Defined contexts of {@BRANCH@} replacements
#   Make sure these strings also trigger correctly when {@BRANCH@} is
#   actually the name of a branch.
contexts = [ 'branch={@BRANCH@}' ]

# Translate contexts into concrete replacements
replacements = {}
for ctx in contexts:
	replacements[ctx] = ctx.replace('{@BRANCH@}', branch);

if len(argv) > 1:
	if argv[1] == '--clean':
		replacements = {v: k for k, v in replacements.items()}

# Transform the filtered file
for line in stdin:
	for key, val in replacements.items():
		line = line.replace(key, val)
	print(line, end='')
