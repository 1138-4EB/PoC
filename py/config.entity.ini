# EMACS settings: -*-	tab-width: 2; indent-tabs-mode: t -*-
# vim: tabstop=2:shiftwidth=2:noexpandtab
# kate: tab-width 2; replace-tabs off; indent-width 2;
# 
# ==============================================================================
# Authors:				 	Patrick Lehmann
# 
# Config file:			Global configuration file
# 
# Description:
# ------------------------------------
#		This file defines:
#		- common directory names
#		- directory names for sub namespaces
#		- prefixes for namespaces
#
# License:
# ==============================================================================
# Copyright 2007-2016 Technische Universitaet Dresden - Germany
#											Chair for VLSI-Design, Diagnostics and Architecture
# 
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#		http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
#
# PoC.alt
# ==============================================================================

# PoC.arith
# ==============================================================================

[IP.arith.addw]
Description =				Adder for wide inputs
tb =								VHDLTestbench
[TB.arith.addw.tb]


[IP.arith.carrychain_inc]
tb =								VHDLTestbench
[TB.arith.carrychain_inc.tb]


[IP.arith.counter_free]
tb =								VHDLTestbench
[TB.arith.counter_free.tb]


[IP.arith.counter_bcd]
tb =								VHDLTestbench
[TB.arith.counter_bcd.tb]
[XST.arith.counter_bcd.nl]
XSTOption.Generics =	DIGITS=9


[IP.arith.counter_gray]
tb =								VHDLTestbench
[TB.arith.counter_gray.tb]


[IP.arith.counter_ring]
tb =								VHDLTestbench
[TB.arith.counter_ring.tb]


[IP.arith.convert_bin2bcd]
tb =								VHDLTestbench
[TB.arith.convert_bin2bcd.tb]


[IP.arith.div]
tb =								VHDLTestbench
[TB.arith.div.tb]


[IP.arith.firstone]
tb =								VHDLTestbench
[TB.arith.firstone.tb]


[IP.arith.muls_wide]


[IP.arith.prefix_and]
tb =								VHDLTestbench
[TB.arith.prefix_and.tb]


[IP.arith.prefix_or]
tb =								VHDLTestbench
[TB.arith.prefix_or.tb]


[IP.arith.prng]
Description =				Pseudo Random Number Generator (PRNG)
tb =								VHDLTestbench
nl1 =								QuartusNetlist
nl2 =								XSTNetlist
nl3 =								LSENetlist
[TB.arith.prng.tb]
[QII.arith.prng.nl1]
[XST.arith.prng.nl2]
XSTOption.Generics =	BITS=8
[LSE.arith.prng.nl3]


[IP.arith.same]


[IP.arith.scaler]
tb =								VHDLTestbench
[TB.arith.scaler.tb]


[IP.arith.shifter_barrel]
nl =								XSTNetlist
[XST.arith.shifter_barrel.nl]
XSTOption.Generics =	BITS=32


[IP.arith.sqrt]

# PoC.bus
# ==============================================================================

[IP.bus.Arbiter]
tb =								VHDLTestbench
[TB.bus.Arbiter.tb]

# PoC.bus.stream
# ------------------------------------------------------------------------------

[IP.bus.stream.Buffer]


[IP.bus.stream.DeMux]


[IP.bus.stream.FrameGenerator]


[IP.bus.stream.Mirror]


[IP.bus.stream.Mux]


[IP.bus.stream.Sink]


[IP.bus.stream.Source]

# PoC.bus.wb
# ------------------------------------------------------------------------------

[IP.bus.wb.fifo_adapter]


[IP.bus.wb.ocram_adapter]


[IP.bus.wb.uart_wrapper]

# PoC.cache
# ==============================================================================

[IP.cache.par]
cocotb =						CocoTestbench
nl1 =								XSTNetlist
nl2 =								QuartusNetlist
nl3 =								LSENetlist
[COCOTB.cache.par.cocotb]
[XST.cache.par.nl1]
[QII.cache.par.nl2]
[LSE.cache.par.nl3]

[IP.cache.replacement_policy]
tb =								VHDLTestbench
[TB.cache.replacement_policy.tb]

[IP.cache.tagunit_par]
tb =								VHDLTestbench
[TB.cache.tagunit_par.tb]

[IP.cache.tagunit_seq]
tb =								VHDLTestbench
[TB.cache.tagunit_seq.tb]

# PoC.comm
# ==============================================================================

[IP.comm.crc]


[IP.comm.scamble]

# PoC.common
# ==============================================================================

[IP.common.config]
tb =								VHDLTestbench
[TB.common.config.tb]

[IP.common.strings]
tb =								VHDLTestbench
[TB.common.strings.tb]


# PoC.dstruct
# ==============================================================================

[IP.dstruct.deque]
tb =								VHDLTestbench
[TB.dstruct.deque.tb]

[IP.dstruct.stack]
tb =								VHDLTestbench
[TB.dstruct.stack.tb]

# PoC.fifo
# ==============================================================================

[IP.fifo.cc_got]
tb =								VHDLTestbench
[TB.fifo.cc_got.tb]

[IP.fifo.cc_got_tempgot]
tb =								VHDLTestbench
[TB.fifo.cc_got_tempgot.tb]

[IP.fifo.cc_got_tempput]
tb =								VHDLTestbench
[TB.fifo.cc_got_tempput.tb]

[IP.fifo.dc_got]


[IP.fifo.ic_got]
tb =								VHDLTestbench
[TB.fifo.ic_got.tb]

[IP.fifo.ic_assembly]
tb =								VHDLTestbench
[TB.fifo.ic_assembly.tb]

[IP.fifo.glue]
tb =								VHDLTestbench
[TB.fifo.glue.tb]

# PoC.io
# ==============================================================================

[IP.io.Debounce]
tb =									VHDLTestbench
[TB.io.Debounce.tb]

[IP.io.7SegmentMux_BCD]


[IP.io.7SegmentMux_HEX]


[IP.io.FanControl]
nl =									XSTNetlist
[XST.io.FanControl.nl]
XSTOption.Generics =	CLOCK_FREQ=100MHz ADD_INPUT_SYNCHRONIZERS=TRUE ENABLE_TACHO=FALSE

[IP.io.FrequencyCounter]


[IP.io.GlitchFilter]


[IP.io.PulseWidthModulation]


[IP.io.TimingCounter]

# PoC.io.ddrio
# ------------------------------------------------------------------------------

[IP.io.ddrio.in]
tb =								VHDLTestbench
[TB.io.ddrio.in.tb]

[IP.io.ddrio.inout]
tb =								VHDLTestbench
nl =								XSTNetlist
[TB.io.ddrio.inout.tb]
[XST.io.ddrio.inout.nl]
XSTConstraintsFile =	${XSTDir}/ddrio_inout.xcf
XSTOption.Generics =	BITS=2

[IP.io.ddrio.out]
tb =								VHDLTestbench
[TB.io.ddrio.out.tb]

# PoC.io.device
# ------------------------------------------------------------------------------

# PoC.io.iic
# ------------------------------------------------------------------------------

[IP.io.iic.BusController]
tb =								VHDLTestbench
[TB.io.iic.Controller.tb]

[IP.io.iic.Controller]


[IP.io.iic.Switch_PCA9548A]

# PoC.io.jtag
# ------------------------------------------------------------------------------

# PoC.io.lcd
# ------------------------------------------------------------------------------

[IP.io.lcd.dotmatrix]


[IP.io.lcd.LCDBuffer]


[IP.io.lcd.LCDSynchronizer]

[IP.io.lcd.ChipScopeVIO]
cg =								CGNetlist
[CG.io.lcd.ChipScopeVIO.cg]
PostCopy.Rule =			${DefaultPostCopyNGC}
										${DefaultPostCopyVHDL}
										${DefaultPostCopyNCF}
										

# PoC.io.mdio
# ------------------------------------------------------------------------------

[IP.io.mdio.IIC_Adapter]


[IP.io.mdio.Controller]

# PoC.io.ow
# ------------------------------------------------------------------------------

[IP.io.ow.BusController]


[IP.io.ow.Controller]

# PoC.io.pio
# ------------------------------------------------------------------------------

[IP.io.pio.fifo]
tb =								VHDLTestbench
[TB.io.pio.fifo.tb]

# PoC.io.pmod
# ------------------------------------------------------------------------------

[IP.io.pmod.KYPD]


[IP.io.pmod.SSD]


[IP.io.pmod.USBUART]

# PoC.io.uart
# ------------------------------------------------------------------------------

[IP.io.uart.rx]
tb =								VHDLTestbench
[TB.io.uart.rx.tb]

[IP.io.uart.tx]


[IP.io.uart.fifo]
nl =									XSTNetlist
[XST.io.uart.fifo.nl]
XSTOption.Generics =	CLOCK_FREQ=100MHz BAUDRATE=115200Bd

[IP.io.uart.ft245]

# PoC.mem
# ==============================================================================

# PoC.mem.is61lv
# ------------------------------------------------------------------------------

# PoC.mem.is61nlp
# ------------------------------------------------------------------------------

# PoC.mem.lut
# ------------------------------------------------------------------------------

[IP.mem.lut.Sine]
tb =								VHDLTestbench
[TB.mem.lut.Sine.tb]

# PoC.mem.ocram
# ------------------------------------------------------------------------------

[IP.mem.ocram.esdp]
nl =									XSTNetlist
[XST.mem.ocram.esdp.nl]
XSTOption.Generics =	a_bits=8 d_bits=16


[IP.mem.ocram.sdp]
tb =									VHDLTestbench
nl =									XSTNetlist
[TB.mem.ocram.sdp.tb]
[XST.mem.ocram.sdp.nl]
XSTOption.Generics =	a_bits=8 d_bits=16

[IP.mem.ocram.sp]
nl =									XSTNetlist
[XST.mem.ocram.sp.nl]
XSTOption.Generics =	a_bits=8 d_bits=16


[IP.mem.ocram.tdp]
nl =									XSTNetlist
[XST.mem.ocram.tdp.nl]
XSTOption.Generics =	a_bits=8 d_bits=16


# PoC.mem.ocrom
# ------------------------------------------------------------------------------

[IP.mem.ocrom.sp]


[IP.mem.ocrom.dp]

# PoC.mem.sdram
# ------------------------------------------------------------------------------

[IP.mem.sdram.ctrl_s3esk]


[IP.mem.sdram.ctrl_de0]

# PoC.misc
# ==============================================================================

[IP.misc.Delay]


[IP.misc.FrequencyMeasurement]


[IP.misc.PulseTrain]


[IP.misc.Sequencer]


[IP.misc.StrobeGenerator]


[IP.misc.StrobeLimiter]


[IP.misc.WorkAligner]

# PoC.misc.filter
# ------------------------------------------------------------------------------

[IP.misc.filter.and]


[IP.misc.filter.mean]


[IP.misc.filter.or]

# PoC.misc.gearbox
# ------------------------------------------------------------------------------

[IP.misc.gearbox.down_cc]
tb =									VHDLTestbench
nl =									XSTNetlist
[TB.misc.gearbox.down_cc.tb]
[XST.misc.gearbox.down_cc.nl]
XSTConstraintsFile =	${XSTNoConstraintsFile}
XSTOption.Generics =	INPUT_BITS=32 OUTPUT_BITS=8 ADD_INPUT_REGISTERS=TRUE ADD_OUTPUT_REGISTERS=TRUE


[IP.misc.gearbox.down_dc]
tb =									VHDLTestbench
nl =									XSTNetlist
[TB.misc.gearbox.down_dc.tb]
[XST.misc.gearbox.down_dc.nl]
XSTConstraintsFile =	${XSTNoConstraintsFile}
XSTOption.Generics =	INPUT_BITS=32 OUTPUT_BITS=8 ADD_INPUT_REGISTERS=TRUE ADD_OUTPUT_REGISTERS=TRUE

[IP.misc.gearbox.up_cc]
tb =									VHDLTestbench
nl =									XSTNetlist
[TB.misc.gearbox.up_cc.tb]
[XST.misc.gearbox.up_cc.nl]
XSTConstraintsFile =	${XSTNoConstraintsFile}
XSTOption.Generics =	INPUT_BITS=8 OUTPUT_BITS=32 ADD_INPUT_REGISTERS=TRUE


[IP.misc.gearbox.up_dc]
tb =									VHDLTestbench
nl =									XSTNetlist
[TB.misc.gearbox.up_dc.tb]
[XST.misc.gearbox.up_dc.nl]
XSTConstraintsFile =	${XSTNoConstraintsFile}
XSTOption.Generics =	INPUT_BITS=8 OUTPUT_BITS=32 ADD_INPUT_REGISTERS=TRUE


# PoC.misc.stat
# ------------------------------------------------------------------------------

[IP.misc.stat.Average]
tb =								VHDLTestbench
[TB.misc.stat.Average.tb]

[IP.misc.stat.Histogram]
tb =								VHDLTestbench
[TB.misc.stat.Histogram.tb]

[IP.misc.stat.Minimum]
tb =								VHDLTestbench
[TB.misc.stat.Minimum.tb]

[IP.misc.stat.Maximum]
tb =								VHDLTestbench
[TB.misc.stat.Maximum.tb]

# PoC.misc.sync
# ------------------------------------------------------------------------------

[IP.misc.sync.Bits]
tb =								VHDLTestbench
[TB.misc.sync.Bits.tb]

[IP.misc.sync.Reset]
tb =								VHDLTestbench
[TB.misc.sync.Reset.tb]

[IP.misc.sync.Strobe]
tb =								VHDLTestbench
[TB.misc.sync.Strobe.tb]

[IP.misc.sync.Vector]
tb =								VHDLTestbench
[TB.misc.sync.Vector.tb]

[IP.misc.sync.Command]
tb =								VHDLTestbench
[TB.misc.sync.Command.tb]

# PoC.net
# ==============================================================================

[IP.net.FrameChecksum]


[IP.net.FrameLoopback]

# PoC.net.arp
# ------------------------------------------------------------------------------

[IP.net.arp.BroadCast_Receiver]


[IP.net.arp.BroadCast_Requester]


[IP.net.arp.Cache]


[IP.net.arp.IPPool]


[IP.net.arp.Tester]


[IP.net.arp.UniCast_Receiver]


[IP.net.arp.UniCast_Responder]


[IP.net.arp.Wrapper]

# PoC.net.eth
# ------------------------------------------------------------------------------

[IP.net.eth.GEMAC_GMII]


[IP.net.eth.GEMAC_RX]


[IP.net.eth.GEMAC_TX]

[IP.net.eth.GMII_SGMII_PCS_Virtex5]
cg =										CGNetlist
[XST.net.eth.GMII_SGMII_PCS_Virtex5.nl]
CoreGeneratorFile =		${SrcDir}/Xilinx/Virtex5/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}


[IP.net.eth.GMII_SGMII_PCS_Virtex6]
cg =										CGNetlist
[XST.net.eth.GMII_SGMII_PCS_Virtex6.nl]
CoreGeneratorFile =		${SrcDir}/Xilinx/Virtex6/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
			 
[IP.net.eth.GMII_SGMII_PCS_Series7]
cg =										CGNetlist
[XST.net.eth.GMII_SGMII_PCS_Series7.nl]
CoreGeneratorFile =		${SrcDir}/Xilinx/Series7/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}


[IP.net.eth.PHYController]


[IP.net.eth.PHYController_Marvell_88E1111]


[IP.net.eth.Wrapper]

# PoC.net.eth10g
# ------------------------------------------------------------------------------
[IP.net.eth10g.PCS_PMA_Series7]
nl =									CGNetlist
[XST.net.eth10g.PCS_PMA_Series7.nl]
CoreGeneratorFile =		${SrcDir}/Xilinx/Series7/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${SPECIAL:OutputDir}/${TopLevel}/example_design/${TopLevel}_block.vhd -> ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}_block.vhdl
											${SPECIAL:OutputDir}/${TopLevel}/example_design/gtx/${TopLevel}_gtwizard_10gbaser.vhd -> ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}_gtwizard_10gbaser.vhdl
											${SPECIAL:OutputDir}/${TopLevel}/example_design/gtx/${TopLevel}_gtwizard_10gbaser_gt.vhd -> ${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}_gtwizard_10gbaser_gt.vhdl
PostReplaceRule =			${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}.vhdl :: "-- synthesis translate_off\n" -> ""
											${PoC:NLDir}/${SPECIAL:Device}/${RelDir}/${TopLevel}.vhdl :: "end eth10g_PCS_PMA_Series7;\n" -> "end eth10g_PCS_PMA_Series7;\n\n-- synthesis translate_off"

# PoC.net.icmpv4
# ------------------------------------------------------------------------------

[IP.net.icmpv4.RX]


[IP.net.icmpv4.TX]


[IP.net.icmpv4.Wrapper]

# PoC.net.icmpv6
# ------------------------------------------------------------------------------

[IP.net.icmpv6.RX]


[IP.net.icmpv6.TX]


[IP.net.icmpv6.Wrapper]

# PoC.net.ipv4
# ------------------------------------------------------------------------------

[IP.net.ipv4.FrameLoopback]


[IP.net.ipv4.RX]


[IP.net.ipv4.TX]


[IP.net.ipv4.Wrapper]

# PoC.net.ipv6
# ------------------------------------------------------------------------------

[IP.net.ipv6.FrameLoopback]


[IP.net.ipv6.RX]


[IP.net.ipv6.TX]


[IP.net.ipv6.Wrapper]

# PoC.net.mac
# ------------------------------------------------------------------------------

[IP.net.mac.FrameLoopback]


[IP.net.mac.RX_DestMAC_Switch]


[IP.net.mac.RX_SrcMAC_Filter]


[IP.net.mac.RX_Type_Switch]


[IP.net.mac.TX_DestMAC_Prepender]


[IP.net.mac.TX_SrcMAC_Prepender]


[IP.net.mac.TX_Type_Prepender]


[IP.net.mac.Wrapper]

# PoC.net.ndp
# ------------------------------------------------------------------------------

[IP.net.ndp.DestinationCache]


[IP.net.ndp.FSMQuery]


[IP.net.ndp.NeighborCache]


[IP.net.ndp.Wrapper]

# PoC.net.stack
# ------------------------------------------------------------------------------

[IP.net.stack.MAC]


[IP.net.stack.IPv4]


[IP.net.stack.IPv6]


[IP.net.stack.UDPv4]


[IP.net.stack.UDPv6]

# PoC.net.udp
# ------------------------------------------------------------------------------

[IP.net.udp.FrameLoopback]


[IP.net.udp.RX]


[IP.net.udp.TX]


[IP.net.udp.Wrapper]

# PoC.sata
# ==============================================================================

[IP.sata.TransceiverLayer]
tb =								VHDLTestbench
[TB.sata.TransceiverLayer.tb]

[IP.sata.PhysicalLAyer]


[IP.sata.LinkLayer]


[IP.sata.TransportLayer]


[IP.sata.StreamingLayer]


[IP.sata.StreamingStack]
nl =									XSTNetlist
[XST.sata.StreamingStack.nl]
XSTConstraintsFile =	${XSTNoConstraintsFile}
XSTOption.Generics =	DEBUG=FALSE ENABLE_CHIPSCOPE=FALSE ENABLE_DEBUGPORT=FALSE REFCLOCK_FREQ=150MHz INITIAL_SATA_GENERATION=2 ALLOW_SPEED_NEGOTIATION=FALSE LOGICAL_BLOCK_SIZE=8KiB

[IP.sata.TransceiverMonitor_ILA]
cg =									CGNetlist
[XST.sata.TransceiverMonitor_ILA.nl]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}

[IP.sata.TransceiverLayer_ILA]]
cg =									CGNetlist
[XST.sata.TransceiverLayer_ILA.nl]
CoreGeneratorFile =		${SrcDir}/chipscope/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
			 
[IP.sata.PhysicalLayer_ILA]]
cg =									CGNetlist
[XST.sata.PhysicalLayer_ILA.nl]
CoreGeneratorFile =		${SrcDir}/chipscope/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
			 
[IP.sata.LinkLayer_ILA]]
cg =									CGNetlist
[XST.sata.LinkLayer_ILA.nl]
CoreGeneratorFile =		${SrcDir}/chipscope/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
			 
[IP.sata.TransportLayer_ILA]]
cg =									CGNetlist
[XST.sata.TransportLayer_ILA.nl]
CoreGeneratorFile =		${SrcDir}/chipscope/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
			 
[IP.sata.StreamingLayer_ILA]]
cg =									CGNetlist
[XST.sata.StreamingLayer_ILA.nl]
CoreGeneratorFile =		${SrcDir}/chipscope/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}


# PoC.sim
# ==============================================================================

[IP.sim.ClockGenerator]
tb =								VHDLTestbench
[TB.sim.ClockGenerator.tb]

[IP.sim.Waveform]
tb =								VHDLTestbench
[TB.sim.Waveform.tb]

# PoC.sort
# ==============================================================================

[IP.sort.ExpireList]
tb =								VHDLTestbench
[TB.sort.ExpireList.tb]

[IP.sort.InsertSort]
tb =								VHDLTestbench
[TB.sort.InsertSort.tb]

[IP.sort.LeastFrequentlyUsed]
tb =								VHDLTestbench
[TB.sort.LeastFrequentlyUsed.tb]

[IP.sort.lru_cache]
tb =								VHDLTestbench
cocotb =						CocoTestbench
[TB.sort.lru_cache.tb]
[COCOTB.sort.lru_cache.cocotb]

[IP.sort.lru_list]
tb =									VHDLTestbench
cocotb =							CocoTestbench
[TB.sort.lru_list.tb]
[COCOTB.sort.lru_list.cocotb]

# PoC.sort.sortnet
# ------------------------------------------------------------------------------

[IP.sort.sortnet.BitonicSort]
tb =									VHDLTestbench
nl1 =									LSENetlist
nl2 =									QuartusNetlist
nl3 =									XSTNetlist
[TB.sort.sortnet.BitonicSort.tb]
[LSE.sort.sortnet.BitonicSort.nl1]
[QII.sort.sortnet.BitonicSort.nl2]
[XST.sort.sortnet.BitonicSort.nl3]
XSTOption.Generics =	INPUTS=32 KEY_BITS=32 DATA_BITS=32 PIPELINE_STAGE_AFTER=2

[IP.sort.sortnet.OddEvenMergeSort]
tb =									VHDLTestbench
nl1 =									LSENetlist
nl2 =									QuartusNetlist
nl3 =									XSTNetlist
[TB.sort.sortnet.OddEvenMergeSort.tb]
[LSE.sort.sortnet.OddEvenMergeSort.nl1]
[QII.sort.sortnet.OddEvenMergeSort.nl2]
[XST.sort.sortnet.OddEvenMergeSort.nl3]

[IP.sort.sortnet.OddEvenSort]
tb =									VHDLTestbench
nl1 =									LSENetlist
nl2 =									QuartusNetlist
nl3 =									XSTNetlist
[TB.sort.sortnet.OddEvenSort.tb]
[LSE.sort.sortnet.OddEvenSort.nl1]
[QII.sort.sortnet.OddEvenSort.nl2]
[XST.sort.sortnet.OddEvenSort.nl3]
XSTOption.Generics =	INPUTS=64 KEY_BITS=32 DATA_BITS=32 PIPELINE_STAGE_AFTER=3 ADD_OUTPUT_REGISTERS=TRUE


[IP.sort.sortnet.MergeSort_Streamed]


[IP.sort.sortnet.Transform]


[IP.sort.sortnet.Stream_Adapter]
tb =								VHDLTestbench
[TB.sort.sortnet.Stream_Adapter.tb]

[IP.sort.sortnet.Stream_Adapter2]
tb =								VHDLTestbench
[TB.sort.sortnet.Stream_Adapter2.tb]

# PoC.xil
# ==============================================================================

[IP.xil.BSCAN]


[IP.xil.ChipScopeICON]
Dependencies =				CG.xil.ChipScopeICON_1.cg
											CG.xil.ChipScopeICON_2.cg
											CG.xil.ChipScopeICON_3.cg
											CG.xil.ChipScopeICON_4.cg
											CG.xil.ChipScopeICON_5.cg
											CG.xil.ChipScopeICON_6.cg
											CG.xil.ChipScopeICON_7.cg
											CG.xil.ChipScopeICON_8.cg
											CG.xil.ChipScopeICON_9.cg
											CG.xil.ChipScopeICON_10.cg
											CG.xil.ChipScopeICON_11.cg
											CG.xil.ChipScopeICON_12.cg
											CG.xil.ChipScopeICON_13.cg
											CG.xil.ChipScopeICON_14.cg
											CG.xil.ChipScopeICON_15.cg

[IP.xil.ChipScopeICON_1]
cg =									CGNetlist
[CG.xil.ChipScopeICON_1.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_2]
cg =									CGNetlist
[CG.xil.ChipScopeICON_2.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_3]
cg =									CGNetlist
[CG.xil.ChipScopeICON_3.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_4]
cg =									CGNetlist
[CG.xil.ChipScopeICON_4.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_5]
cg =									CGNetlist
[CG.xil.ChipScopeICON_5.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_6]
cg =									CGNetlist
[CG.xil.ChipScopeICON_6.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_7]
cg =									CGNetlist
[CG.xil.ChipScopeICON_7.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_8]
cg =									CGNetlist
[CG.xil.ChipScopeICON_8.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_9]
cg =									CGNetlist
[CG.xil.ChipScopeICON_9.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_10]
cg =									CGNetlist
[CG.xil.ChipScopeICON_10.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_11]
cg =									CGNetlist
[CG.xil.ChipScopeICON_11.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_12]
cg =									CGNetlist
[CG.xil.ChipScopeICON_12.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_13]
cg =									CGNetlist
[CG.xil.ChipScopeICON_13.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_14]
cg =									CGNetlist
[CG.xil.ChipScopeICON_14.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}
[IP.xil.ChipScopeICON_15]
cg =									CGNetlist
[CG.xil.ChipScopeICON_15.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_8x4k]
cg =									CGNetlist
[CG.xil.ChipScopeILA_8x4k.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_8x32k]
cg =									CGNetlist
[CG.xil.ChipScopeILA_8x32k.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_16x4k]
cg =									CGNetlist
[CG.xil.ChipScopeILA_16x4k.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_32x4k]
cg =									CGNetlist
[CG.xil.ChipScopeILA_32x4k.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}

[IP.xil.ChipScopeILA_64x4k]
cg =									CGNetlist
[CG.xil.ChipScopeILA_64x4k.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}

[IP.xil.ChipScopeVIO_8x8]
cg =									CGNetlist
[CG.xil.ChipScopeVIO_8x8.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
PostCopyRule =				${DefaultPostCopyNGC}
											${DefaultPostCopyVHDL}
											${DefaultPostCopyNCF}

[IP.xil.Reconfigurator]


[IP.xil.SystemMonitor]

# PoC.xil.mig
# ------------------------------------------------------------------------------

[IP.xil.mig.Atlys_1x128]
nl =									XSTNetlist
cg =									CoreGenNetlist
[CG.xil.mig.Atlys_1x128.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco
RulesFile =						${DefaultRulesFile}
[XST.xil.mig.Atlys_1x128.nl]
Dependencies =				CG.xil.mig.Atlys_1x128.cg
XSTConstraintsFile =	${XSTDir}/${TopLevel}.xcf
# example for different clock and no clock buffer
#XSTOption.Generics =	C3_CLKOUT2_DIVIDE=8 C3_INPUT_CLK_TYPE="NONE"


[IP.xil.mig.KC705_MT8JTF12864HZ_1G6]
cg =									CGNetlist
nl =									XSTNetlist

# step 1: coregen
[CG.xil.mig.KC705_MT8JTF12864HZ_1G6.cg]
CoreGeneratorFile =		${SrcDir}/${TopLevel}.xco

# step 2: generate netlist
[XST.xil.mig.KC705_MT8JTF12864HZ_1G6.2.nl]
Dependencies =				CG.xil.mig.KC705_MT8JTF12864HZ_1G6.cg
XSTConstraintsFile =	${XSTDir}/${TopLevel}.xcf
# set TEMP_MON_CONTROL="EXTERNAL" if the temperature is supplied by an external XADC instance
XSTOption.Generics =	TEMP_MON_CONTROL="INTERNAL"

